//package com.gaurav.dashboardbackend.service;
//
//import com.gaurav.dashboardbackend.model.Client;
//import com.gaurav.dashboardbackend.model.Task;
//import com.gaurav.dashboardbackend.model.User;
//import com.gaurav.dashboardbackend.repository.ClientRepository;
//import com.gaurav.dashboardbackend.repository.TaskRepository;
//import com.gaurav.dashboardbackend.repository.UserRepository;
//import com.lowagie.text.Document;
//import com.lowagie.text.Font;
//import com.lowagie.text.FontFactory;
//import com.lowagie.text.Paragraph;
//import com.lowagie.text.pdf.PdfPTable;
//import com.lowagie.text.pdf.PdfWriter;
//import lombok.RequiredArgsConstructor;
//import org.springframework.stereotype.Service;
//
//import java.io.ByteArrayOutputStream;
//import java.util.List;
//
//@Service
//@RequiredArgsConstructor
//public class InvoiceService {
//    private final ClientRepository clientRepository;
//    private final TaskRepository taskRepository;
//    private final UserRepository userRepository;
//
//    public byte[] generateInvoicePdf(Long clientId, String userEmail) throws Exception {
//        Client client = clientRepository.findById(clientId).orElseThrow();
//        User user = userRepository.findByEmail(userEmail).orElseThrow();
//        List<Task> tasks = taskRepository.findByClientAndUser(client, user);
//
//        Document document = new Document();
//        ByteArrayOutputStream out = new ByteArrayOutputStream();
//        PdfWriter.getInstance(document, out);
//
//        document.open();
//
//        Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18);
//        Font textFont = FontFactory.getFont(FontFactory.HELVETICA, 12);
//
//        document.add(new Paragraph("Invoice", titleFont));
//        document.add(new Paragraph(" "));
//
//        document.add(new Paragraph("Client: " + client.getName(), textFont));
//        document.add(new Paragraph("Email: " + client.getEmail(), textFont));
//        document.add(new Paragraph("Company: " + client.getCompany(), textFont));
//        document.add(new Paragraph("Generated by: " + user.getName(), textFont));
//        document.add(new Paragraph(" "));
//
//        PdfPTable table = new PdfPTable(3);
//        table.setWidthPercentage(100);
//        table.addCell("Task");
//        table.addCell("Description");
//        table.addCell("Completed");
//
//        for (Task task : tasks) {
//            table.addCell(task.getTitle());
//            table.addCell(task.getDescription());
//            table.addCell(task.isCompleted() ? "Yes" : "No");
//        }
//
//        document.add(table);
//
//        document.close();
//
//        return out.toByteArray();
//    }
//}

package com.gaurav.dashboardbackend.service;

import com.gaurav.dashboardbackend.model.Client;
import com.gaurav.dashboardbackend.model.Task;
import com.gaurav.dashboardbackend.model.User;
import com.gaurav.dashboardbackend.repository.ClientRepository;
import com.gaurav.dashboardbackend.repository.TaskRepository;
import com.gaurav.dashboardbackend.repository.UserRepository;
import com.lowagie.text.Document;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Service
@RequiredArgsConstructor
public class InvoiceService {

    private final ClientRepository clientRepository;
    private final TaskRepository taskRepository;
    private final UserRepository userRepository;

    public byte[] generateInvoicePdf(Long clientId, String userEmail) throws Exception {
        Client client = clientRepository.findById(clientId).orElseThrow();
        User user = userRepository.findByEmail(userEmail).orElseThrow();
        List<Task> tasks = taskRepository.findByClientAndUser(client, user);

        Document document = new Document();
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        PdfWriter.getInstance(document, out);

        document.open();

        Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18);
        Font textFont = FontFactory.getFont(FontFactory.HELVETICA, 12);

        document.add(new Paragraph("Invoice", titleFont));
        document.add(new Paragraph(" "));

        document.add(new Paragraph("Client: " + client.getName(), textFont));
        document.add(new Paragraph("Email: " + client.getEmail(), textFont));
        document.add(new Paragraph("Company: " + client.getCompany(), textFont));
        document.add(new Paragraph("Generated by: " + user.getName(), textFont));
        document.add(new Paragraph(" "));

        PdfPTable table = new PdfPTable(4); // 4 columns now
        table.setWidthPercentage(100);
        table.addCell("Task");
        table.addCell("Description");
        table.addCell("Status");
        table.addCell("Due Date");

//        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
//        table.addCell(task.getDueDate() != null ? sdf.format(task.getDueDate()) : "N/A");

        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
//        dtf.format(task.getDueDate())

        for (Task task : tasks) {
            table.addCell(task.getTitle());
            table.addCell(task.getDescription());
            table.addCell(task.getStatus());
            table.addCell(task.getDueDate() != null ? dtf.format(task.getDueDate()) : "N/A");
        }

//        for (Task task : tasks) {
//            table.addCell(task.getTitle());
//            table.addCell(task.getDescription());
//            table.addCell(task.getStatus());
//            table.addCell(task.getDueDate() != null ? sdf.format(task.getDueDate()) : "N/A");
//        }

        document.add(table);
        document.close();

        return out.toByteArray();
    }
}

